name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

permissions:
  contents: read
  actions: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        python -m pytest test_excelsearchpro.py -v --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build-executables:
    needs: test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    permissions:
      contents: read
      actions: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executables (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        set PYTHONIOENCODING=utf-8
        python build_exe.py
        
    - name: Build executables (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name=ExcelSearchPro-GUI main.py
        pyinstaller --onefile --name=ExcelSearchPro-CLI excel_search_cli.py
        pyinstaller --onefile --name=ExcelSearchPro main.py
    
    - name: Create release package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release-package
        copy release\*.exe release-package\
        copy LICENSE release-package\
        copy README.md release-package\
        copy install.bat release-package\
    
    - name: Create release package (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir release-package
        cp dist/* release-package/
        cp LICENSE release-package/
        cp README.md release-package/
    
    - name: Archive release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ExcelSearchPro-${{ matrix.os }}
        path: release-package/

  publish-pypi:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read
      id-token: write  # For trusted publishing to PyPI
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
